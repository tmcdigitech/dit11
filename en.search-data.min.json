[{"id":0,"href":"/dit11/appdev/","title":"App Development","parent":"11 DigiTech","content":""},{"id":1,"href":"/dit11/gameDesign/03walkthroughs/gemCatcher/","title":"Gem Catcher","parent":"Walk-throughs","content":" First program update() Adding a gem Collision and Random Keeping Score Mouse and Events Game Over Challenges  "},{"id":2,"href":"/dit11/appdev/gettingStarted/","title":"Getting Started","parent":"App Development","content":""},{"id":3,"href":"/dit11/gameDesign/01gettingStarted/","title":"Getting started","parent":"Game Design","content":""},{"id":4,"href":"/dit11/gameDesign/02basics/python/","title":"Python","parent":"Learning the basics","content":"If you are new to Python, here is an good interactive guide you can get started with:\nAposteriori: Introduction to Python\n"},{"id":5,"href":"/dit11/appdev/gettingStarted/software/","title":"Software","parent":"Getting Started","content":"To start using Kivy to develop apps, you will need to:\n  Open the Company Portal:   Find and install Visual Studio Code (NOT Visual Studio Community):   Find and install Python (3.9):\n  "},{"id":6,"href":"/dit11/appdev/gettingStarted/helloworld/","title":"1. Hello World","parent":"Getting Started","content":"Taken from prosperocoder.com\nHello World – A Basic Kivy App    Well, we’re going to write a basic Kivy app that will display the Hello World text. In Kivy, like in many other GUI libraries and frameworks, static text is usually displayed in a label. In Kivy we call simple GUI elements like labels, buttons, sliders, check boxes, etc. widgets, although widgets don’t have to be simple at all and you can create your own widgets, which we are going to do later.\nCreate a folder    Anyway, our program is going to display the text Hello World in a label. Before we write the code, let’s create a folder where we will save it. Then open the folder in your editor or IDE. Here’s how to do it in Visual Studio Code:\n Open folder in VSC   Setup and install Kivy    Create a new virtual environment for your Kivy project. A virtual environment will prevent possible installation conflicts with other Python versions and packages. It’s optional but strongly recommended, open a New Terminal window and run the following:\n Open a Terminal window and create the virtual environment named .env in your current directory: py -3 -m venv .venv Update the security on this folder Set-ExecutionPolicy -ExecutionPolicy RemoteSigned -Scope Process Activate your new virtual environment. .venv\\scripts\\activate Install Kivy python -m pip install kivy  Create a new file    When you open your folder, you need a file to write the code to. This is going to be a regular Python file, so with the extension .py. You can name your file whatever you like, I’ll name mine main.py. Here’s how you can create the file: When you hover your mouse over the name of your folder, a menu with a couple icons will appear. The first icon is the one you should click to create a new file:\n Open folder in VSC   All you have to do is type in the name of the file: main.py. As soon as you confirm by hitting Enter, the new file will be listed in the folder (A) and it will open automatically in a new tab (B). This is how we are going to add new files in the future.  Open folder in VSC   Write the code of the Kivy app    Now we are ready to write our code. Here it is with comments: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17  # We\u0026#39;re using Kivy, so we\u0026#39;ll need the kivy module import kivy # We need the App class. Our application is going to inherit from it. from kivy.app import App # We also need the Label widget. from kivy.uix.button import Label # Here comes the application class. It inherits from App. class HelloWorldApp(App): def build(self): return Label(text=\u0026#39;Hello World!\u0026#39;) # And this is where we actually run the app. if __name__ == \u0026#39;__main__\u0026#39;: HelloWorldApp().run()  \nRunning Your Kivy App    This is a basic Kivy application. Now we are ready to run it. There are several ways you can do it. Let’s have a look at the most obvious ones:\n1) the Run Python File in Terminal button    The first way to run the app is by pressing the Run Python File in Terminal button in the upper right corner (A). Here’s what we get when we do that: the application window shows up with our application running in it (B) and the terminal opens at the bottom with the Kivy log (C).  Run Python File in Terminal button   2) Run the Kivy App Without Debugging in the Debug menu    You can also go to the Debug menu and select Run Without Debugging:  Run the Kivy App Without Debugging   3) Start Debugging option in the Debug menu    There is also the Start Debugging option in the Debug menu. You can choose it and then select a Debug Configuration. Go ahead and select the first option, Python File:  Start Debugging option in the Debug menu   4) Hotkeys    For the previous two options you can also use hotkeys:\n – F5 to start debugging – Ctrl + F5 to run without debugging  5) Context menu    You can also right-click anywhere in the editor tab where the code of your file is and select Run Python File in Terminal:  Context menu   "},{"id":7,"href":"/dit11/gameDesign/","title":"Game Design","parent":"11 DigiTech","content":""},{"id":8,"href":"/dit11/gameDesign/02basics/","title":"Learning the basics","parent":"Game Design","content":""},{"id":9,"href":"/dit11/gameDesign/03walkthroughs/ninjaRunner/","title":"Ninja Runner","parent":"Walk-throughs","content":" Infinite Runner Background Ninja Jumping Obstacles Keeping Score Game Over Challenges and Bugs  "},{"id":10,"href":"/dit11/gameDesign/02basics/pygameZero/","title":"Pygame Zero","parent":"Learning the basics","content":"Let\u0026rsquo;s get a simple game happening, a bit at a time, so you can see how you might go about it yourself.\nAll of these examples are complete programs, so make sure you copy them into Mu (or whatever editor you\u0026rsquo;re using) and run them as you go through this page.\nScreen size    Let\u0026rsquo;s start by setting the size of the screen.\n1 2 3 4 5 6  import pgzrun WIDTH = 800 HEIGHT = 600 pgzrun.go() # Must be last line   Background    Now let\u0026rsquo;s add a coloured background. To do this we need to define a function called draw(), which Pygame Zero will call every time it needs to redraw the screen:\n1 2 3 4 5 6 7 8 9  import pgzrun WIDTH = 800 HEIGHT = 600 def draw(): screen.fill((128, 0, 0)) pgzrun.go() # Must be last line   Why the double brackets?\nNotice that we had to use two sets of brackets in that example to set the colour of the background. In Pygame Zero, colours are always written as a set of three numbers like this: (0, 130, 255), which in Python is called a tuple (rhyming with \u0026lsquo;couple\u0026rsquo;). A tuple is indicated with round brackets. But the function also takes a set of round brackets, so we know it is a function. So the outer set of brackets belongs to the fill() function call, and the inside set to the tuple for the colour.  Basic shapes    Let\u0026rsquo;s add a couple of basic shapes.\n1 2 3 4 5 6 7 8 9 10  import pgzrun WIDTH = 800 HEIGHT = 600 def draw(): screen.fill((128, 0, 0)) screen.draw.filled_circle((0,150), 10, (200, 100, 200))  pgzrun.go() # Must be last line   The filled_circle() command takes three bits of information, known as arguments:\n the co-ordinates of the circle\u0026rsquo;s centre (x, y) as a tuple, the radius, the colour (r, g, b) as a tuple.  "},{"id":11,"href":"/dit11/appdev/gettingStarted/kvfiles/","title":"2. Kv Files","parent":"Getting Started","content":"Taken from prosperocoder.com\nOur program contains just one widget, the label. This is all as far as presentation is concerned. We’ll move that part to a new file and leave the rest in the main.py file. So, after we remove the presentation part from the main.py, as well as the comments to make the file clear and transparent, this is what we’ll have:\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17  # We\u0026#39;re using Kivy, so we\u0026#39;ll need the kivy module import kivy # We need the App class. Our application is going to inherit from it. from kivy.app import App # We also need the Label widget. from kivy.uix.button import Label # Here comes the application class. It inherits from App. class HelloWorldApp(App): def build(self): return Label() # And this is where we actually run the app. if __name__ == \u0026#39;__main__\u0026#39;: HelloWorldApp().run()   As you can see, now we’re just telling the app that a label should be used, but it doesn’t know anything more about the label. In particular, it doesn’t know what text should go in the label. This is what the kv file is going to take care of. By the way, I’m going to call the files written in the Kivy language kv files, for the sake of brevity. These files are easily recognizable by the kv extension.\nkv Files and the Kivy Language    Now we are ready to create the kv file. Actually, there are two approaches to this. If you have just one kv file, you can go with the simpler approach.\nNaming Convention    In this approach we use a naming convention according to which we name the file the same as the app class (the class that inherits from App), but without the ‘App’ part and all lowercase. So, in our example the app class is HelloWorldApp, so the kv file should be named helloworld.kv.\nNow, in Visual Studio Code (which I’m going to refer to as VSC from now on, also for brevity’s sake), create a new file, just as you did before and name it helloworld.kv:\n Open folder in VSC   As soon as you hit Enter, the file will open in a new tab. Type the following Kivy language code: 1 2  \u0026lt;Label\u0026gt;: text: \u0026#39;Hello World!\u0026#39;  \nWe’re going to talk about the Kivy language in more detail later on, for now it’s enough to say that this is all you need to take care of the label. The : part means we’re working on the Label class, and below we set the text property to a string of our choice.\nNow save the kv file and go back to the main.py. Run the program. This is what you should see:  "},{"id":12,"href":"/dit11/appdev/gettingStarted/labelproperties/","title":"3. Label Properties","parent":"Getting Started","content":"Taken from prosperocoder.com\nHere’s the code again.\nThe Python file:\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17  # We\u0026#39;re using Kivy, so we\u0026#39;ll need the kivy module import kivy # We need the App class. Our application is going to inherit from it. from kivy.app import App # We also need the Label widget. from kivy.uix.button import Label # Here comes the application class. It inherits from App. class HelloWorldApp(App): def build(self): return Label() # And this is where we actually run the app. if __name__ == \u0026#39;__main__\u0026#39;: HelloWorldApp().run()   As you can see, now we’re just telling the app that a label should be used, but it doesn’t know anything more about the label. In particular, it doesn’t know what text should go in the label. This is what the kv file is going to take care of. By the way, I’m going to call the files written in the Kivy language kv files, for the sake of brevity. These files are easily recognizable by the kv extension.\nkv Files and the Kivy Language    Now we are ready to create the kv file. Actually, there are two approaches to this. If you have just one kv file, you can go with the simpler approach.\nNaming Convention    In this approach we use a naming convention according to which we name the file the same as the app class (the class that inherits from App), but without the ‘App’ part and all lowercase. So, in our example the app class is HelloWorldApp, so the kv file should be named helloworld.kv.\nNow, in Visual Studio Code (which I’m going to refer to as VSC from now on, also for brevity’s sake), create a new file, just as you did before and name it helloworld.kv:\n Open folder in VSC   As soon as you hit Enter, the file will open in a new tab. Type the following Kivy language code: 1 2  \u0026lt;Label\u0026gt;: text: \u0026#39;Hello World!\u0026#39;  \nWe’re going to talk about the Kivy language in more detail later on, for now it’s enough to say that this is all you need to take care of the label. The : part means we’re working on the Label class, and below we set the text property to a string of our choice.\nNow save the kv file and go back to the main.py. Run the program. This is what you should see:  "},{"id":13,"href":"/dit11/appdev/gettingStarted/programs/","title":"Creating and running programs","parent":"Getting Started","content":"Taken from pybricks.com\n Now that you’ve set up your computer and EV3 Brick, you’re ready to start writing programs.\nTo make it easier to create and manage your programs, let’s first have a quick look at how MicroPython projects and programs for your EV3 robots are organized.\nPrograms are organized into project folders, as shown in Figure 8. A project folder is a directory/folder on your computer that contains the main program (main.py) and other optional scripts or files. This project folder and all of its contents will be copied to the EV3 Brick, where the main program will be run.\nThis page shows you how to create such a project and how to transfer it to the EV3 Brick.\n Figure 8: A project contains a program called main.py and optional resources like sounds or MicroPython modules.   Creating a new project    To create a new project, open the EV3 MicroPython tab and click create a new project, as shown in Figure 9. Enter a project name in the text field that appears and press Enter. When prompted, choose a location for this program and confirm by clicking choose folder.\n Figure 9: Creating a new project. This example is called getting_started, but you can choose any name.   When you create a new project, it already includes a file called main.py. To see its contents and to modify it, open it from the file browser as shown in Figure 10. This is where you’ll write your programs.\nIf you are new to MicroPython programming, we recommend that you keep the existing code in place and add your code to it.\n Figure 10: Opening the default main.py program.   Opening an existing project    To open a project you created previously, click File and click Open Folder, as shown in Figure 11. Next, navigate to your previously created project folder and click OK. You can also open your recently used projects using the Open Recent menu option.\n Figure 11: Opening a previously created project.   Connecting to the EV3 Brick with Visual Studio Code    To be able to transfer your code to the EV3 Brick, you’ll first need to connect the EV3 Brick to your computer with the mini-USB cable and configure the connection with Visual Studio Code. To do so:\n Turn the EV3 Brick on Connect the EV3 Brick to your computer with the mini-USB cable Configure the USB connection as shown in Figure 12.   Figure 12: Configuring the USB connection between the computer and the EV3 Brick   Downloading and running a program    You can press the F5 key to run the program. Alternatively, you can start it manually by going to the debug tab and clicking the green start arrow, as shown in Figure 13.\nWhen the program starts, a pop-up toolbar allows you to stop the program if necessary. You can also stop the program at any time using the back button on the EV3 Brick.\nIf your program produces any output with the print command, this is shown in the output window.\n Figure 13: Running a program   Expanding the example program    Now that you’ve run the basic code template, you can expand the program to make a motor move. First, attach a Large Motor to Port B on the EV3 Brick, as shown in Figure 14.\n Figure 14: The EV3 Brick with a Large Motor attached to port B.   Next, edit main.py to make it look like this:\n#!/usr/bin/env pybricks-micropython from pybricks.hubs import EV3Brick from pybricks.ev3devices import Motor from pybricks.parameters import Port # Create your objects here # Initialize the EV3 Brick. ev3 = EV3Brick() # Initialize a motor at port B. test_motor = Motor(Port.B) # Write your program here # Play a sound. ev3.speaker.beep() # Run the motor up to 500 degrees per second. To a target angle of 90 degrees. test_motor.run_target(500, 90) # Play another beep sound. ev3.speaker.beep(frequency=1000, duration=500) This program makes your robot beep, rotate the motor, and beep again with a higher pitched tone. Run the program to make sure that it works as expected.\nManaging files on the EV3 Brick    After you’ve downloaded a project to the EV3 Brick, you can run, delete, or back up programs stored on it using the device browser as shown in Figure 15.\n Figure 15: Using the EV3 device browser to manage files on your EV3 Brick   "},{"id":14,"href":"/dit11/gameDesign/03walkthroughs/tankGame/","title":"Tanks","parent":"Walk-throughs","content":" Battle City 1985 Tank Moving the tank Background and Walls Randomizing the Walls Blocking Movements Tank Cannon Destroying Walls One Enemy Enemy Bullets Many Enemies Winning and Losing  "},{"id":15,"href":"/dit11/gameDesign/03walkthroughs/","title":"Walk-throughs","parent":"Game Design","content":""},{"id":16,"href":"/dit11/gameDesign/03walkthroughs/chaseGame/","title":"Chase game","parent":"Walk-throughs","content":"Chase game\n"},{"id":17,"href":"/dit11/gameDesign/03walkthroughs/mazeGame/","title":"Maze game","parent":"Walk-throughs","content":"Maze game\nIntroduces tile maps\n"},{"id":18,"href":"/dit11/gameDesign/03walkthroughs/shootingGame/","title":"Shooting game","parent":"Walk-throughs","content":"Shooting game\n"},{"id":19,"href":"/dit11/gameDesign/03walkthroughs/racingGame/","title":"Racing game","parent":"Walk-throughs","content":"Racing game\n"},{"id":20,"href":"/dit11/appdev/gettingStarted/flowcharts/","title":"Flowcharts","parent":"Getting Started","content":"Flowcharts are a visual representation of program flow. A flowchart normally uses a combination of blocks and arrows to represent actions and sequence. Blocks typically represent actions. The order in which actions occur is shown using arrows that point from statement to statement. Sometimes a block will have multiple arrows coming out of it, representing a step where a decision must be made about which path to follow.\n Start and End symbols are represented as rounded rectangles, usually containing the word \u0026ldquo;Star\u0026rdquo; or \u0026ldquo;End\u0026rdquo;, but can be more specific such as \u0026ldquo;Power Robot Off\u0026rdquo; or \u0026ldquo;Stop All Motors\u0026rdquo;.\nActions are represented as rectangles and act as basic commands. Examples: wait(10) increment LineCount by 1 motors full ahead\nDecision blocks are represented as diamonds. These typically contain Yes/No questions. Decision blocks have two or more arrows coming Out Of them, representing the different paths that can be followed, depending on the outcome Of the decision. The arrows should always be labelled accordingly.\n  Example Flowchart    The following flowchart instructs a robot to run forward as long as its touch sensor is not pressed. When the touch sensor is pressed the motors stop and the program ends.    Example Flowchart    The following flowchart instructs a robot to run forward as long as its color sensor reflected light is less than 10%. When the color sensor reflected light is greater than 10% the robot will stop.    "},{"id":21,"href":"/dit11/appdev/gettingStarted/constructs/","title":"Programming Constructs","parent":"Getting Started","content":"Programs are designed using common building blocks. These building blocks, known as programming constructs (or programming concepts), form the basis for all programs.\nThere are three basic building blocks to consider:\n sequence is the order in which instructions occur and are processed selection determines which path a program takes when it is running iteration is the repeated execution of a section of code when a program is running    Sequence    Sequence is the order in which programming statements are executed. Programming statements usually run one after another in order, unless one of the other programming constructs is used. The sequence of a program is extremely important as once these are translated, carrying out instructions in the wrong order leads to a program performing incorrectly.\nThe following example code will execute each line in order/sequence 1 2 3 4  print(\u0026#34;Let\u0026#39;s introduce ourselves.\u0026#34;) print(\u0026#34;My name is Eliza. What is your name?\u0026#34;) name = input() print(\u0026#34;Hello \u0026#34; + name + \u0026#34;, nice to meet you.\u0026#34;)  \nSelection    IF statements    Selection is a programming construct where a section of code is run only if a condition is met. In programming, there are often occasions when a decision needs to be made. Selection is the process of making a decision. The result of the decision can either be TRUE or FALSE, this determines which path the program will take next.\nThe following code uses selection to test the condition varHeight \u0026gt; 1.6, if this condition is TRUE then \u0026ldquo;Tall enough to enter ride\u0026rdquo; is printed. 1 2  if varHeight \u0026gt; 1.6: \tprint(\u0026#34;Tall enough to enter ride\u0026#34;)  \nThe following code uses selection to test the condition username == \u0026ldquo;Callum\u0026rdquo;, if this condition is TRUE then \u0026ldquo;Access granted\u0026rdquo; is printed. If the condition is FASLE we can use else: to execute a different line of code. 1 2 3 4  if username == \u0026#34;Callum\u0026#34;: print(\u0026#34;Access granted\u0026#34;) else: \tprint(\u0026#34;Unknown username\u0026#34;)  \nIteration or Loop    Programs often need to repeat certain steps while or until a condition has been met. This process is known as iteration.\nIteration or repetition is often referred to as looping, since the program ‘loops’ back to an earlier line of code.\nIteration allows programmers to simplify a program and make it more efficient. Instead of writing out the same lines of code again and again(mistages happen), a programmer can write a section of code once, and ask the program to execute the same line repeatedly until no longer needed.\n"},{"id":22,"href":"/dit11/gameDesign/03walkthroughs/verticalShooter/","title":"Vertical shooter","parent":"Walk-throughs","content":" Twin Bee  "},{"id":23,"href":"/dit11/glossary/","title":"Glossary","parent":"11 DigiTech","content":""},{"id":24,"href":"/dit11/gameDesign/03walkthroughs/moreTutorials/","title":"More walk-throughs","parent":"Walk-throughs","content":"Simple Game Tutorials for Python and Pygame Zero 1.2\n"},{"id":25,"href":"/dit11/gameDesign/inspiration/","title":"Inspiration","parent":"Game Design","content":"Here is a selection of games which are over 30 years old, but which show that well thought out gameplay doesn\u0026rsquo;t need graphics to shine.\nMaybe one of these will inspire your next creation\u0026hellip;\n"},{"id":26,"href":"/dit11/troubleshooting/","title":"Troubleshooting","parent":"11 DigiTech","content":""},{"id":27,"href":"/dit11/reference/","title":"Reference materials","parent":"11 DigiTech","content":"Robotics     LEGO MicroPython Documentation LEGO Python for EV3 EV3 Tutorial  Game Design     Pygame Zero documentation Physics for Game Developers Teaching a kid to code with Pygame Zero  "},{"id":28,"href":"/dit11/teaching/","title":"Teaching materials","parent":"11 DigiTech","content":""},{"id":29,"href":"/dit11/","title":"11 DigiTech","parent":"","content":"Welcome to Year 11 Digital Technologies!\nThis semester we will work on two broad topics:\n App development in Kivy using Python game design using Unity   Kivy   "},{"id":30,"href":"/dit11/glossary/argument/","title":"argument","parent":"Glossary","content":"When calling a function, the values given to it are called arguments. For example, in this case:\ntotal = add(3, 4) 3 and 4 are arguments to the function add().\nWhen defining a function, the pieces of information that the function takes to do its job are called parameters.\n"},{"id":31,"href":"/dit11/categories/","title":"Categories","parent":"11 DigiTech","content":""},{"id":32,"href":"/dit11/glossary/coordinate/","title":"co-ordinate system","parent":"Glossary","content":"In most programming environments (such as Pygame Zero), the screen co-ordinate system uses (x, y) co-ordinates, with the origin (0, 0) in the top left corner of the screen, with x to the right, and y going down.\nEverything to be displayed on the screen must be rastered, which means rendered into a grid of colored pixels.\n"},{"id":33,"href":"/dit11/glossary/color/","title":"color/colour","parent":"Glossary","content":"In almost all programming, American spellings are used. So as programmers we use colors, even though we would normally spell the word colours.\nFor most programming, colors are described by the amount of red, green, and blue light to emit. These numbers are normally in the range 0-255. In Pygame Zero, we list these as a tuple (red, green, blue), such as:\n(0, 150, 255) You can use the Google Color Picker to find different colors, and then copy the RGB value listed.\n"},{"id":34,"href":"/dit11/gameDesign/inspiration/EnchantedScepters/","title":"Enchanted Scepters","parent":"Inspiration","content":"by Silicon Beach Software (1984)\nIn this part-illustrated, part-text adventure, you are tasked with recovering four magical sceptres (earth, fire, wind and water, of course) to save your kingdom from invasion.\n "},{"id":35,"href":"/dit11/gameDesign/inspiration/Iago/","title":"Iago","parent":"Inspiration","content":"by David Reed (1984)\nIago was a very early Othello/Reversi game, which offered excellent gameplay. You could play against a friend or a computer with three levels of difficulty, on three different sizes of board.\nIt even has a special feature to hide the game if you are playing it at work and your boss is coming\u0026hellip;\n "},{"id":36,"href":"/dit11/glossary/parameter/","title":"parameter","parent":"Glossary","content":"When defining a function, the pieces of information that the function takes to do its job are called parameters. For example, here:\ndef add(first, second): return first + second first and second are the parameters of the function add().\nWhen calling a function, the values given to it are called arguments.\n"},{"id":37,"href":"/dit11/gameDesign/inspiration/PhraseCraze/","title":"Phrase Craze","parent":"Inspiration","content":"by Brad Pettit (1986)\nBorrowing heavily from the TV game show Wheel of Fortune, Phrase Craze offers up to four players the chance to relive the thrill of being on the set, complete with game board, wheel, and charming host. You could also modify the PhraseFile to create your own puzzles.\n "},{"id":38,"href":"/dit11/teaching/siteUrl/","title":"Site URL 🡄🡆","parent":"Teaching materials","content":"Learn about Pygame Zero here:\nhttps://tmcdigitech.github.io/dit8/\n"},{"id":39,"href":"/dit11/gameDesign/01gettingStarted/software/","title":"Software","parent":"Getting started","content":"To develop games using Pygame Zero, you have two main options:\n use Mu use another editor  Mu is set up to be very helpful for beginners. It has some keyboard shortcuts, good help text, nice shortcut buttons, and is generaly very friendly to use and has a lot of features to help beginners get started.\nAfter you have been writing code for a while, you may find that a standard Python environment and a \u0026ldquo;full\u0026rdquo; text editor like Visual Studio Code allows you a lot more power and flexibility, at the cost of doing some more basic things yourself.\nAn example of this is that Mu will automatically add the necessary first and last lines to your Pygame Zero file.\nThe very top line, line 1, must read:\nimport pgzrun And the very last line must read:\npgzrun.go() If you are using Mu, it will automatically add these lines if you forget. With VS Code or another editor, you will need to do this yourself.\nUsing Mu    Install Mu, using the Company Portal (on a school computer), or from the website. You\u0026rsquo;re done!\nThere is a beginner\u0026rsquo;s guide to Mu, if you want more help on how to use Mu.\nTo make games in Pygame Zero, make sure you select the mode Pygame Zero.\nUsing Visual Studio Code    From the Company Portal (on a school computer), or using the links below, install:\n Visual Studio Code Python  "},{"id":40,"href":"/dit11/gameDesign/01gettingStarted/fileStructure/","title":"Structuring your files","parent":"Getting started","content":"Each of your projects should live in its own folder somewhere sensible (like in a Digital Tech folder in your OneDrive!).\nproject/ ├── game.py │ ├── images/ │ ├── someImage.jpg │ ├── anotherImage.jpg │ └── ... # sprites, tiles and other image files │ ├── fonts/ │ └── ... # any font files │ ├── sounds/ │ └── ... # any sound files │ └── music/ └── ... # any music files You don\u0026rsquo;t need to have those folders unless you have something to put in them.\nCheck your version of Mu\nIf you are using a version of Mu older than 1.1.0-alpha.2, the shortcut buttons in Pygame Zero mode (Images, Sounds, Fonts and Music) will open folders in Mu\u0026rsquo;s default save location. If you have saved your project in a different location (like your OneDrive) you won\u0026rsquo;t be able to use these shortcut buttons, as they won\u0026rsquo;t open the right folders.\nFrom 1.1.0-alpha.2 onwards, the buttons will open folders relative to the file you have open, so they will always work, regardless of where you save your game file.\n "},{"id":41,"href":"/dit11/gameDesign/inspiration/StuntCopter/","title":"StuntCopter","parent":"Inspiration","content":"by Duane Blehm (1986)\nPart of the genius of this game is how simple it is. Your aim is to drop people out of a helicopter onto the cart, carefully avoiding the rider and the horse. The further up you drop from, the more points you get. See what happens when you drop someone through the clouds\u0026hellip;\nIf you go to Options \u0026gt; OffScreen in the menu, you can also see the complete sprite sheet for the game; a nice touch.\n "},{"id":42,"href":"/dit11/tags/","title":"Tags","parent":"11 DigiTech","content":""},{"id":43,"href":"/dit11/glossary/tuple/","title":"tuple","parent":"Glossary","content":"A tuple is a single unit of data made up of multiple values. In Python they are defined using round brackets, with commas separating the values. Tuples can contain all sorts of data as values, but in Pygame Zero we use them most often for colors (red, green, blue) and co-ordinates (x, y).\n"},{"id":44,"href":"/dit11/troubleshooting/01whybroken/","title":"Why won't my program work?","parent":"Troubleshooting","content":"Here is a checklist of things to look for if something is wrong\u0026hellip;\nSpelling and Capitalisation    Remember that the computer is really, really, really, really stupid. It will recognise only words it has been taught; it is not clever enough to handle spelling mistakes - these will confuse it. It is also not clever enough to know that most of the time we use A and a interchangeably, so you have to make sure that if the computer is expecting a capital letter, you give it one, and vice versa.\n"}]