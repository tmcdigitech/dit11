<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>11 DigiTech on TMC - 11 Digital Tech | Semester 1</title><link>https://tmcdigitech.github.io/dit11/</link><description>Recent content in 11 DigiTech on TMC - 11 Digital Tech | Semester 1</description><generator>Hugo</generator><language>en-au</language><atom:link href="https://tmcdigitech.github.io/dit11/index.xml" rel="self" type="application/rss+xml"/><item><title>Buttons and Labels</title><link>https://tmcdigitech.github.io/dit11/appdev/basics/events/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://tmcdigitech.github.io/dit11/appdev/basics/events/</guid><description>&lt;div class="gdoc-page__anchorwrap">
 &lt;h2 id="creating-a-kv-file">
 Creating a .kv File
 &lt;a data-clipboard-text="https://tmcdigitech.github.io/dit11/appdev/basics/events/#creating-a-kv-file" class="gdoc-page__anchor gdoc-page__anchor--right clip" aria-label="Anchor Creating a .kv File" href="#creating-a-kv-file">
 &lt;svg class="icon gdoc_link">&lt;use xlink:href="#gdoc_link">&lt;/use>&lt;/svg>
 &lt;/a>
 &lt;/h2>
&lt;/div>&lt;div class="gdoc-page__anchorwrap">
 &lt;h3 id="separated-our-logic-from-our-styling-and-elements">
 Separated our logic from our styling and elements
 &lt;a data-clipboard-text="https://tmcdigitech.github.io/dit11/appdev/basics/events/#separated-our-logic-from-our-styling-and-elements" class="gdoc-page__anchor gdoc-page__anchor--right clip" aria-label="Anchor Separated our logic from our styling and elements" href="#separated-our-logic-from-our-styling-and-elements">
 &lt;svg class="icon gdoc_link">&lt;use xlink:href="#gdoc_link">&lt;/use>&lt;/svg>
 &lt;/a>
 &lt;/h3>
&lt;/div>&lt;p>There are a few conventions we need to follow when creating a .kv file.&lt;/p>
&lt;p>Naming: The name of your .kv file must follow the rules below in order for python/kivy to be able to see and load the file.&lt;/p></description></item><item><title>Classes and Methods</title><link>https://tmcdigitech.github.io/dit11/appdev/basics/classesandmethods/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://tmcdigitech.github.io/dit11/appdev/basics/classesandmethods/</guid><description>&lt;div class="gdoc-page__anchorwrap">
 &lt;h2 id="object-oriented-programming-oop">
 Object Oriented Programming (OOP)
 &lt;a data-clipboard-text="https://tmcdigitech.github.io/dit11/appdev/basics/classesandmethods/#object-oriented-programming-oop" class="gdoc-page__anchor gdoc-page__anchor--right clip" aria-label="Anchor Object Oriented Programming (OOP)" href="#object-oriented-programming-oop">
 &lt;svg class="icon gdoc_link">&lt;use xlink:href="#gdoc_link">&lt;/use>&lt;/svg>
 &lt;/a>
 &lt;/h2>
&lt;/div>&lt;p>OOP has self-contained objects containing both the programming routine/procedures and the data being processed. These objects interact by sending data to one another.&lt;/p>
&lt;p>In OOP, you write classes that represent real world things and create objects based on these classes. Classes attributes as well as procedures (often known as methods).&lt;/p>
&lt;p>Class
The class is the blueprint, or template, that defines what an object is. This includes the type of data an object can hold, its initial value and how the object behaves.&lt;/p></description></item><item><title>Float Layout</title><link>https://tmcdigitech.github.io/dit11/appdev/layouts/floatlayout/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://tmcdigitech.github.io/dit11/appdev/layouts/floatlayout/</guid><description>&lt;div class="gdoc-page__anchorwrap">
 &lt;h1 id="a-floatlayout-with-a-button">
 A FloatLayout with a Button
 &lt;a data-clipboard-text="https://tmcdigitech.github.io/dit11/appdev/layouts/floatlayout/#a-floatlayout-with-a-button" class="gdoc-page__anchor gdoc-page__anchor--right clip" aria-label="Anchor A FloatLayout with a Button" href="#a-floatlayout-with-a-button">
 &lt;svg class="icon gdoc_link">&lt;use xlink:href="#gdoc_link">&lt;/use>&lt;/svg>
 &lt;/a>
 &lt;/h1>
&lt;/div>&lt;p>What we are going to do now is write code that uses a FloatLayout with a text input and a custom button in it. To demonstrate how the properties used for sizing and positioning work, though, let’s use just the button first.&lt;/p>
&lt;div class="gdoc-page__anchorwrap">
 &lt;h2 id="the-size_hint-and-pos_hint-properties">
 The size_hint and pos_hint Properties
 &lt;a data-clipboard-text="https://tmcdigitech.github.io/dit11/appdev/layouts/floatlayout/#the-size_hint-and-pos_hint-properties" class="gdoc-page__anchor gdoc-page__anchor--right clip" aria-label="Anchor The size_hint and pos_hint Properties" href="#the-size_hint-and-pos_hint-properties">
 &lt;svg class="icon gdoc_link">&lt;use xlink:href="#gdoc_link">&lt;/use>&lt;/svg>
 &lt;/a>
 &lt;/h2>
&lt;/div>&lt;p>This time we’re going to use the size_hint property instead of size to set the widget size.&lt;/p></description></item><item><title>Python</title><link>https://tmcdigitech.github.io/dit11/appdev/basics/python/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://tmcdigitech.github.io/dit11/appdev/basics/python/</guid><description>&lt;p>If you are new to Python, here is an good interactive guide you can get started with:&lt;/p>
&lt;p>&lt;a class="gdoc-markdown__link" href="https://aposteriori.trinket.io/introduction-to-python">Aposteriori: Introduction to Python&lt;/a>&lt;/p></description></item><item><title>ScreenManager</title><link>https://tmcdigitech.github.io/dit11/appdev/layouts/screenmanager/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://tmcdigitech.github.io/dit11/appdev/layouts/screenmanager/</guid><description>&lt;div class="gdoc-page__anchorwrap">
 &lt;h1 id="using-more-than-one-screen">
 Using more than one screen
 &lt;a data-clipboard-text="https://tmcdigitech.github.io/dit11/appdev/layouts/screenmanager/#using-more-than-one-screen" class="gdoc-page__anchor gdoc-page__anchor--right clip" aria-label="Anchor Using more than one screen" href="#using-more-than-one-screen">
 &lt;svg class="icon gdoc_link">&lt;use xlink:href="#gdoc_link">&lt;/use>&lt;/svg>
 &lt;/a>
 &lt;/h1>
&lt;/div>&lt;p>Watch the following video to learn how you can use more than one screen in your app.&lt;/p>
&lt;iframe src="https://tmccatholiceduau-my.sharepoint.com/personal/tnykke_tmc_catholic_edu_au/_layouts/15/embed.aspx?UniqueId=2665bbe7-a267-58a9-b3ca-a5ba64344563&amp;embed=%7B%22ust%22%3Atrue%2C%22hv%22%3A%22CopyEmbedCode%22%7D&amp;referrer=StreamWebApp&amp;referrerScenario=EmbedDialog.Create" width="640" height="360" frameborder="0" scrolling="no" allowfullscreen title="Kivy ScreenManager-20220322_112205.mp4">&lt;/iframe>
&lt;div class="gdoc-page__anchorwrap">
 &lt;h3 id="include-the-following">
 Include the following
 &lt;a data-clipboard-text="https://tmcdigitech.github.io/dit11/appdev/layouts/screenmanager/#include-the-following" class="gdoc-page__anchor gdoc-page__anchor--right clip" aria-label="Anchor Include the following" href="#include-the-following">
 &lt;svg class="icon gdoc_link">&lt;use xlink:href="#gdoc_link">&lt;/use>&lt;/svg>
 &lt;/a>
 &lt;/h3>
&lt;/div>&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="line">&lt;span class="cl">&lt;span class="kn">from&lt;/span> &lt;span class="nn">kivy.lang&lt;/span> &lt;span class="kn">import&lt;/span> &lt;span class="n">Builder&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kn">from&lt;/span> &lt;span class="nn">kivy.uix.screenmanager&lt;/span> &lt;span class="kn">import&lt;/span> &lt;span class="n">ScreenManager&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>
&lt;div class="gdoc-page__anchorwrap">
 &lt;h2 id="how-it-fits-together">
 How it fits together
 &lt;a data-clipboard-text="https://tmcdigitech.github.io/dit11/appdev/layouts/screenmanager/#how-it-fits-together" class="gdoc-page__anchor gdoc-page__anchor--right clip" aria-label="Anchor How it fits together" href="#how-it-fits-together">
 &lt;svg class="icon gdoc_link">&lt;use xlink:href="#gdoc_link">&lt;/use>&lt;/svg>
 &lt;/a>
 &lt;/h2>
&lt;/div>&lt;figure>&lt;img src="https://tmcdigitech.github.io/dit11/appdev/layouts/screenmanager/Screenshot%202022-03-23%20100746.png">
&lt;/figure></description></item><item><title>Software</title><link>https://tmcdigitech.github.io/dit11/appdev/gettingStarted/software/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://tmcdigitech.github.io/dit11/appdev/gettingStarted/software/</guid><description>&lt;p>To start using Kivy to develop apps, you will need to:&lt;/p>
&lt;ol>
&lt;li>
&lt;p>Open the &lt;strong>Company Portal&lt;/strong>:
&lt;img src="https://image.winudf.com/v2/image1/Y29tLm1pY3Jvc29mdC53aW5kb3dzaW50dW5lLmNvbXBhbnlwb3J0YWxfaWNvbl8xNjEwNDgyMDcyXzA1MQ/icon.png?w=&amp;amp;fakeurl=1" alt="Company Portal Logo" />&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Find and install &lt;strong>Visual Studio Code&lt;/strong> (NOT Visual Studio Community):
&lt;img src="https://code.visualstudio.com/opengraphimg/opengraph-home.png" alt="Visual Studio Code logo" />&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Find and install &lt;strong>Python&lt;/strong> (3.9):&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Open Visual Studio Code and install the Python Extension
&lt;figure>&lt;img src="Screenshot%202022-02-23%20115053.png">
&lt;/figure>
&lt;/p>
&lt;/li>
&lt;/ol></description></item><item><title>What is an API</title><link>https://tmcdigitech.github.io/dit11/appdev/api/whatisapi/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://tmcdigitech.github.io/dit11/appdev/api/whatisapi/</guid><description>&lt;p>There are millions of APIs online which provide access to data. Websites like Reddit, Twitter, and Facebook all offer certain data through their APIs.&lt;/p>
&lt;p>To use an API, you make a request to a remote web server, and retrieve the data you need.&lt;/p>
&lt;p>But why use an API instead of a static CSV dataset you can download from the web? APIs are useful in the following cases:&lt;/p>
&lt;ul>
&lt;li>The data is changing quickly. An example of this is stock price data. It doesn’t really make sense to regenerate a dataset and download it every minute — this will take a lot of bandwidth, and be pretty slow.&lt;/li>
&lt;li>You want a small piece of a much larger set of data. Reddit comments are one example. What if you want to just pull your own comments on Reddit? It doesn’t make much sense to download the entire Reddit database, then filter just your own comments.&lt;/li>
&lt;li>There is repeated computation involved. Spotify has an API that can tell you the genre of a piece of music. You could theoretically create your own classifier, and use it to compute music categories, but you’ll never have as much data as Spotify does.
In cases like the ones above, an API is the right solution. We’ll be querying a simple API to retrieve data about the International Space Station (ISS).&lt;/li>
&lt;/ul>
&lt;figure>&lt;img src="https://tmcdigitech.github.io/dit11/appdev/api/whatisapi/iss.jpg">
&lt;/figure>

&lt;div class="gdoc-page__anchorwrap">
 &lt;h2 id="what-is-an-api">
 What is an API?
 &lt;a data-clipboard-text="https://tmcdigitech.github.io/dit11/appdev/api/whatisapi/#what-is-an-api" class="gdoc-page__anchor gdoc-page__anchor--right clip" aria-label="Anchor What is an API?" href="#what-is-an-api">
 &lt;svg class="icon gdoc_link">&lt;use xlink:href="#gdoc_link">&lt;/use>&lt;/svg>
 &lt;/a>
 &lt;/h2>
&lt;/div>&lt;p>An API, or &lt;strong>Application Programming Interface&lt;/strong>, is a server that you can use to retrieve and send data to using code. APIs are most commonly used to retrieve data, and that will be the focus of this beginner tutorial.&lt;/p></description></item><item><title>1. Hello World</title><link>https://tmcdigitech.github.io/dit11/appdev/gettingStarted/helloworld/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://tmcdigitech.github.io/dit11/appdev/gettingStarted/helloworld/</guid><description>&lt;p>&lt;em>Taken from &lt;a class="gdoc-markdown__link" href="https://prosperocoder.com/posts/kivy/kivy-part-3-a-basic-kivy-app/">prosperocoder.com&lt;/a>&lt;/em>&lt;/p>
&lt;div class="gdoc-page__anchorwrap">
 &lt;h2 id="hello-world--a-basic-kivy-app">
 Hello World – A Basic Kivy App
 &lt;a data-clipboard-text="https://tmcdigitech.github.io/dit11/appdev/gettingStarted/helloworld/#hello-world--a-basic-kivy-app" class="gdoc-page__anchor gdoc-page__anchor--right clip" aria-label="Anchor Hello World – A Basic Kivy App" href="#hello-world--a-basic-kivy-app">
 &lt;svg class="icon gdoc_link">&lt;use xlink:href="#gdoc_link">&lt;/use>&lt;/svg>
 &lt;/a>
 &lt;/h2>
&lt;/div>&lt;p>Well, we’re going to write a basic Kivy app that will display the Hello World text. In Kivy, like in many other GUI libraries and frameworks, static text is usually displayed in a label. In Kivy we call simple GUI elements like labels, buttons, sliders, check boxes, etc. widgets, although widgets don’t have to be simple at all and you can create your own widgets, which we are going to do later.&lt;/p></description></item><item><title>2. Kv Files</title><link>https://tmcdigitech.github.io/dit11/appdev/gettingStarted/kvfiles/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://tmcdigitech.github.io/dit11/appdev/gettingStarted/kvfiles/</guid><description>&lt;p>&lt;em>Taken from &lt;a class="gdoc-markdown__link" href="https://prosperocoder.com/posts/kivy/kivy-part-3-a-basic-kivy-app/">prosperocoder.com&lt;/a>&lt;/em>&lt;/p>
&lt;p>Our program contains just one widget, the label. This is all as far as presentation is concerned. We’ll move that part to a new file and leave the rest in the main.py file. So, after we remove the presentation part from the main.py, as well as the comments to make the file clear and transparent, this is what we’ll have:&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># We&amp;#39;re using Kivy, so we&amp;#39;ll need the kivy module&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kn">import&lt;/span> &lt;span class="nn">kivy&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># We need the App class. Our application is going to inherit from it.&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kn">from&lt;/span> &lt;span class="nn">kivy.app&lt;/span> &lt;span class="kn">import&lt;/span> &lt;span class="n">App&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># We also need the Label widget.&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kn">from&lt;/span> &lt;span class="nn">kivy.uix.button&lt;/span> &lt;span class="kn">import&lt;/span> &lt;span class="n">Label&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># Here comes the application class. It inherits from App.&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">class&lt;/span> &lt;span class="nc">HelloWorldApp&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">App&lt;/span>&lt;span class="p">):&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">def&lt;/span> &lt;span class="nf">build&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="bp">self&lt;/span>&lt;span class="p">):&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="n">Label&lt;/span>&lt;span class="p">()&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># And this is where we actually run the app.&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">if&lt;/span> &lt;span class="vm">__name__&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="s1">&amp;#39;__main__&amp;#39;&lt;/span>&lt;span class="p">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">HelloWorldApp&lt;/span>&lt;span class="p">()&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">run&lt;/span>&lt;span class="p">()&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>
&lt;p>As you can see, now we’re just telling the app that a label should be used, but it doesn’t know anything more about the label. In particular, it doesn’t know what text should go in the label. This is what the kv file is going to take care of. By the way, I’m going to call the files written in the Kivy language kv files, for the sake of brevity. These files are easily recognizable by the kv extension.&lt;/p></description></item><item><title>3. Label Properties</title><link>https://tmcdigitech.github.io/dit11/appdev/gettingStarted/labels/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://tmcdigitech.github.io/dit11/appdev/gettingStarted/labels/</guid><description>&lt;p>&lt;em>Taken from &lt;a class="gdoc-markdown__link" href="https://prosperocoder.com/posts/kivy/kivy-part-3-a-basic-kivy-app/">prosperocoder.com&lt;/a>&lt;/em>&lt;/p>
&lt;p>Here’s the code again.&lt;/p>
&lt;p>The Python file:&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="line">&lt;span class="cl"> &lt;span class="n">File&lt;/span> &lt;span class="n">name&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="n">main&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">py&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kn">import&lt;/span> &lt;span class="nn">kivy&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kn">from&lt;/span> &lt;span class="nn">kivy.app&lt;/span> &lt;span class="kn">import&lt;/span> &lt;span class="n">App&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kn">from&lt;/span> &lt;span class="nn">kivy.uix.button&lt;/span> &lt;span class="kn">import&lt;/span> &lt;span class="n">Label&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">class&lt;/span> &lt;span class="nc">HelloWorldApp&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">App&lt;/span>&lt;span class="p">):&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">def&lt;/span> &lt;span class="nf">build&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="bp">self&lt;/span>&lt;span class="p">):&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="n">Label&lt;/span>&lt;span class="p">()&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">if&lt;/span> &lt;span class="vm">__name__&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="s1">&amp;#39;__main__&amp;#39;&lt;/span>&lt;span class="p">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">HelloWorldApp&lt;/span>&lt;span class="p">()&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">run&lt;/span>&lt;span class="p">()&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>
&lt;p>and the kv file:
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># File name: helloworld.kv&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">Label&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>&lt;span class="p">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">text&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s1">&amp;#39;Hello World!&amp;#39;&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;/p>
&lt;p>This program displays a label. The label has a text property. This is a special Kivy property, not to be confused with the regular Python property. We’re going to use Kivy properties a lot, and even create our own ones, just bear with me. Anyway, the Label class has some more properties. We’re going to have a look at the Label properties in this part and then in the next part we’ll see how to use other widgets like buttons, toggle buttons, check boxes, text inputs and sliders, both in Python and in the Kivy language. These are the widgets we’ll be making use of in our project, but there many others, which you can look up in the documentation, which you can find at kivy.org.&lt;/p></description></item><item><title>4. Buttons</title><link>https://tmcdigitech.github.io/dit11/appdev/gettingStarted/buttons/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://tmcdigitech.github.io/dit11/appdev/gettingStarted/buttons/</guid><description>&lt;p>&lt;em>Taken from &lt;a class="gdoc-markdown__link" href="https://prosperocoder.com/posts/kivy/kivy-part-3-a-basic-kivy-app/">prosperocoder.com&lt;/a>&lt;/em>&lt;/p>
&lt;div class="gdoc-page__anchorwrap">
 &lt;h2 id="a-button-widget-is-basically-a-label">
 A Button Widget is Basically a Label…
 &lt;a data-clipboard-text="https://tmcdigitech.github.io/dit11/appdev/gettingStarted/buttons/#a-button-widget-is-basically-a-label" class="gdoc-page__anchor gdoc-page__anchor--right clip" aria-label="Anchor A Button Widget is Basically a Label…" href="#a-button-widget-is-basically-a-label">
 &lt;svg class="icon gdoc_link">&lt;use xlink:href="#gdoc_link">&lt;/use>&lt;/svg>
 &lt;/a>
 &lt;/h2>
&lt;/div>&lt;p>In Kivy the Button class inherits from Label, so they have the same properties in common, plus the button has some extra functionality. In particular they share the text property. Let’s modify our main.py and helloworld.kv files so that our program displays a button widget instead of a label. First, let the changes be as few as possible. Here’s the main.py file:&lt;/p></description></item><item><title>Page Layouts</title><link>https://tmcdigitech.github.io/dit11/appdev/layouts/pagelayouts/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://tmcdigitech.github.io/dit11/appdev/layouts/pagelayouts/</guid><description>&lt;p>The PageLayout works in a different manner from other layouts. It is a dynamic layout, in the sense that it allows flipping through pages using its borders. The idea is that its components are stacked in front of each other, and we can just see the one that is on top.
PageLayout is similar to pages of a copy like that we can move/change the pages right or left.&lt;/p>
&lt;p>The PageLayout class is used to create a simple multi-page layout, in a way that allows easy flipping from one page to another using border.&lt;/p></description></item><item><title>Parse JSON</title><link>https://tmcdigitech.github.io/dit11/appdev/api/parsejson/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://tmcdigitech.github.io/dit11/appdev/api/parsejson/</guid><description>&lt;div class="gdoc-page__anchorwrap">
 &lt;h1 id="what-is-parsing">
 What is Parsing
 &lt;a data-clipboard-text="https://tmcdigitech.github.io/dit11/appdev/api/parsejson/#what-is-parsing" class="gdoc-page__anchor gdoc-page__anchor--right clip" aria-label="Anchor What is Parsing" href="#what-is-parsing">
 &lt;svg class="icon gdoc_link">&lt;use xlink:href="#gdoc_link">&lt;/use>&lt;/svg>
 &lt;/a>
 &lt;/h1>
&lt;/div>&lt;p>Parsing is breaking a block of data into smaller pieces (tokens) by following a set of rules (using delimiters for example), so that this data could be processes piece by piece (managed, analysed, interpreted, transmitted, ets).&lt;/p>
&lt;p>How do we parse JSON in Python. First we load a JSON file using &lt;strong>json.load()&lt;/strong> method. The result is a &lt;strong>Python dictionary&lt;/strong>. We can then access the fields using dictionary methods.&lt;/p></description></item><item><title>More Layouts</title><link>https://tmcdigitech.github.io/dit11/appdev/layouts/morelayouts/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://tmcdigitech.github.io/dit11/appdev/layouts/morelayouts/</guid><description>&lt;div class="gdoc-page__anchorwrap">
 &lt;h1 id="relative-layout">
 Relative Layout
 &lt;a data-clipboard-text="https://tmcdigitech.github.io/dit11/appdev/layouts/morelayouts/#relative-layout" class="gdoc-page__anchor gdoc-page__anchor--right clip" aria-label="Anchor Relative Layout" href="#relative-layout">
 &lt;svg class="icon gdoc_link">&lt;use xlink:href="#gdoc_link">&lt;/use>&lt;/svg>
 &lt;/a>
 &lt;/h1>
&lt;/div>&lt;p>RelativeLayout works pretty much like FloatLayout and the difference will be clear only later when we embed it in another layout. Here’s a simple example with a RelativeLayout and just one button in it. The button should be positioned at the fixed coordinates 0, 0 and occupy about a third of the available space in both horizontal and vertical direction.&lt;/p></description></item><item><title>Activity 1</title><link>https://tmcdigitech.github.io/dit11/appdev/basics/activity1/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://tmcdigitech.github.io/dit11/appdev/basics/activity1/</guid><description>&lt;div class="gdoc-page__anchorwrap">
 &lt;h2 id="setting-up-the-python-script">
 Setting up The Python Script
 &lt;a data-clipboard-text="https://tmcdigitech.github.io/dit11/appdev/basics/activity1/#setting-up-the-python-script" class="gdoc-page__anchor gdoc-page__anchor--right clip" aria-label="Anchor Setting up The Python Script" href="#setting-up-the-python-script">
 &lt;svg class="icon gdoc_link">&lt;use xlink:href="#gdoc_link">&lt;/use>&lt;/svg>
 &lt;/a>
 &lt;/h2>
&lt;/div>&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="line">&lt;span class="cl">&lt;span class="kn">import&lt;/span> &lt;span class="nn">kivy&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kn">from&lt;/span> &lt;span class="nn">kivy.app&lt;/span> &lt;span class="kn">import&lt;/span> &lt;span class="n">App&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kn">from&lt;/span> &lt;span class="nn">kivy.uix.label&lt;/span> &lt;span class="kn">import&lt;/span> &lt;span class="n">Label&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kn">from&lt;/span> &lt;span class="nn">kivy.uix.gridlayout&lt;/span> &lt;span class="kn">import&lt;/span> &lt;span class="n">GridLayout&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kn">from&lt;/span> &lt;span class="nn">kivy.uix.textinput&lt;/span> &lt;span class="kn">import&lt;/span> &lt;span class="n">TextInput&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kn">from&lt;/span> &lt;span class="nn">kivy.uix.button&lt;/span> &lt;span class="kn">import&lt;/span> &lt;span class="n">Button&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kn">from&lt;/span> &lt;span class="nn">kivy.uix.widget&lt;/span> &lt;span class="kn">import&lt;/span> &lt;span class="n">Widget&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kn">from&lt;/span> &lt;span class="nn">kivy.properties&lt;/span> &lt;span class="kn">import&lt;/span> &lt;span class="n">ObjectProperty&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">class&lt;/span> &lt;span class="nc">MyGrid&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">Widget&lt;/span>&lt;span class="p">):&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">pass&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">class&lt;/span> &lt;span class="nc">MyApp&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">App&lt;/span>&lt;span class="p">):&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">def&lt;/span> &lt;span class="nf">build&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="bp">self&lt;/span>&lt;span class="p">):&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="n">MyGrid&lt;/span>&lt;span class="p">()&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">if&lt;/span> &lt;span class="vm">__name__&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="s2">&amp;#34;__main__&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">MyApp&lt;/span>&lt;span class="p">()&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">run&lt;/span>&lt;span class="p">()&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>
&lt;div class="gdoc-page__anchorwrap">
 &lt;h2 id="creating-a-kv-file">
 Creating a .kv File
 &lt;a data-clipboard-text="https://tmcdigitech.github.io/dit11/appdev/basics/activity1/#creating-a-kv-file" class="gdoc-page__anchor gdoc-page__anchor--right clip" aria-label="Anchor Creating a .kv File" href="#creating-a-kv-file">
 &lt;svg class="icon gdoc_link">&lt;use xlink:href="#gdoc_link">&lt;/use>&lt;/svg>
 &lt;/a>
 &lt;/h2>
&lt;/div>&lt;div class="gdoc-page__anchorwrap">
 &lt;h3 id="separated-our-logic-from-our-styling-and-elements">
 Separated our logic from our styling and elements
 &lt;a data-clipboard-text="https://tmcdigitech.github.io/dit11/appdev/basics/activity1/#separated-our-logic-from-our-styling-and-elements" class="gdoc-page__anchor gdoc-page__anchor--right clip" aria-label="Anchor Separated our logic from our styling and elements" href="#separated-our-logic-from-our-styling-and-elements">
 &lt;svg class="icon gdoc_link">&lt;use xlink:href="#gdoc_link">&lt;/use>&lt;/svg>
 &lt;/a>
 &lt;/h3>
&lt;/div>&lt;p>There are a few conventions we need to follow when creating a .kv file.&lt;/p></description></item><item><title>Activity 2</title><link>https://tmcdigitech.github.io/dit11/appdev/basics/activity2/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://tmcdigitech.github.io/dit11/appdev/basics/activity2/</guid><description>&lt;div class="gdoc-page__anchorwrap">
 &lt;h1 id="create-a-simple-calculator">
 Create a simple calculator
 &lt;a data-clipboard-text="https://tmcdigitech.github.io/dit11/appdev/basics/activity2/#create-a-simple-calculator" class="gdoc-page__anchor gdoc-page__anchor--right clip" aria-label="Anchor Create a simple calculator" href="#create-a-simple-calculator">
 &lt;svg class="icon gdoc_link">&lt;use xlink:href="#gdoc_link">&lt;/use>&lt;/svg>
 &lt;/a>
 &lt;/h1>
&lt;/div>&lt;div class="gdoc-page__anchorwrap">
 &lt;h2 id="setting-up-the-python-script">
 Setting up The Python Script
 &lt;a data-clipboard-text="https://tmcdigitech.github.io/dit11/appdev/basics/activity2/#setting-up-the-python-script" class="gdoc-page__anchor gdoc-page__anchor--right clip" aria-label="Anchor Setting up The Python Script" href="#setting-up-the-python-script">
 &lt;svg class="icon gdoc_link">&lt;use xlink:href="#gdoc_link">&lt;/use>&lt;/svg>
 &lt;/a>
 &lt;/h2>
&lt;/div>&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="line">&lt;span class="cl">&lt;span class="kn">import&lt;/span> &lt;span class="nn">kivy&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kn">from&lt;/span> &lt;span class="nn">kivy.app&lt;/span> &lt;span class="kn">import&lt;/span> &lt;span class="n">App&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kn">from&lt;/span> &lt;span class="nn">kivy.uix.widget&lt;/span> &lt;span class="kn">import&lt;/span> &lt;span class="n">Widget&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kn">from&lt;/span> &lt;span class="nn">kivy.properties&lt;/span> &lt;span class="kn">import&lt;/span> &lt;span class="n">ObjectProperty&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">class&lt;/span> &lt;span class="nc">MyGrid&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">Widget&lt;/span>&lt;span class="p">):&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">pass&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">class&lt;/span> &lt;span class="nc">MyApp&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">App&lt;/span>&lt;span class="p">):&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">def&lt;/span> &lt;span class="nf">build&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="bp">self&lt;/span>&lt;span class="p">):&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="n">MyGrid&lt;/span>&lt;span class="p">()&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">if&lt;/span> &lt;span class="vm">__name__&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="s2">&amp;#34;__main__&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">MyApp&lt;/span>&lt;span class="p">()&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">run&lt;/span>&lt;span class="p">()&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>
&lt;div class="gdoc-page__anchorwrap">
 &lt;h2 id="creating-a-kv-file">
 Creating a .kv File
 &lt;a data-clipboard-text="https://tmcdigitech.github.io/dit11/appdev/basics/activity2/#creating-a-kv-file" class="gdoc-page__anchor gdoc-page__anchor--right clip" aria-label="Anchor Creating a .kv File" href="#creating-a-kv-file">
 &lt;svg class="icon gdoc_link">&lt;use xlink:href="#gdoc_link">&lt;/use>&lt;/svg>
 &lt;/a>
 &lt;/h2>
&lt;/div>&lt;div class="gdoc-page__anchorwrap">
 &lt;h3 id="separated-our-logic-from-our-styling-and-elements">
 Separated our logic from our styling and elements
 &lt;a data-clipboard-text="https://tmcdigitech.github.io/dit11/appdev/basics/activity2/#separated-our-logic-from-our-styling-and-elements" class="gdoc-page__anchor gdoc-page__anchor--right clip" aria-label="Anchor Separated our logic from our styling and elements" href="#separated-our-logic-from-our-styling-and-elements">
 &lt;svg class="icon gdoc_link">&lt;use xlink:href="#gdoc_link">&lt;/use>&lt;/svg>
 &lt;/a>
 &lt;/h3>
&lt;/div>&lt;p>There are a few conventions we need to follow when creating a .kv file.&lt;/p></description></item><item><title>Activity 3</title><link>https://tmcdigitech.github.io/dit11/appdev/basics/activity3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://tmcdigitech.github.io/dit11/appdev/basics/activity3/</guid><description>&lt;div class="gdoc-page__anchorwrap">
 &lt;h2 id="create-a-password-generator">
 Create a Password Generator
 &lt;a data-clipboard-text="https://tmcdigitech.github.io/dit11/appdev/basics/activity3/#create-a-password-generator" class="gdoc-page__anchor gdoc-page__anchor--right clip" aria-label="Anchor Create a Password Generator" href="#create-a-password-generator">
 &lt;svg class="icon gdoc_link">&lt;use xlink:href="#gdoc_link">&lt;/use>&lt;/svg>
 &lt;/a>
 &lt;/h2>
&lt;/div>&lt;p>Learning how to create a password generator can be the perfect project to learn or review basic Python and Kivy concepts.&lt;/p>
&lt;p>To create a password generator in Python you can use a for loop that randomly selects alphanumeric characters, digits and punctuation characters to generate the password string. You can set the password length that defines the number of loop iterations. Also, using a nested for loop you can improve the password generator to generate multiple passwords.&lt;/p></description></item><item><title>Embedding Layouts</title><link>https://tmcdigitech.github.io/dit11/appdev/layouts/embedlayouts/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://tmcdigitech.github.io/dit11/appdev/layouts/embedlayouts/</guid><description>&lt;div class="gdoc-page__anchorwrap">
 &lt;h1 id="floatlayouts-and-relativelayouts-inside-gridlayout">
 FloatLayouts and RelativeLayouts inside GridLayout
 &lt;a data-clipboard-text="https://tmcdigitech.github.io/dit11/appdev/layouts/embedlayouts/#floatlayouts-and-relativelayouts-inside-gridlayout" class="gdoc-page__anchor gdoc-page__anchor--right clip" aria-label="Anchor FloatLayouts and RelativeLayouts inside GridLayout" href="#floatlayouts-and-relativelayouts-inside-gridlayout">
 &lt;svg class="icon gdoc_link">&lt;use xlink:href="#gdoc_link">&lt;/use>&lt;/svg>
 &lt;/a>
 &lt;/h1>
&lt;/div>&lt;p>As mentioned in the previous part, the FloatLayout and the RelativeLayout are pretty similar. The difference is that with the FloatLayout the coordinates are not relative to the position of the layout, whereas with RelativeLayout they are. Here’s a simple demonstration. We’ll use a GridLayout and embed four other layouts in it, two FloatLayouts and two RelativeLayouts. Here’s the Python code:&lt;/p></description></item><item><title>KivyMD</title><link>https://tmcdigitech.github.io/dit11/appdev/kivymd/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://tmcdigitech.github.io/dit11/appdev/kivymd/</guid><description>&lt;div class="gdoc-page__anchorwrap">
 &lt;h2 id="what-is-kivymd">
 What is KivyMD
 &lt;a data-clipboard-text="https://tmcdigitech.github.io/dit11/appdev/kivymd/#what-is-kivymd" class="gdoc-page__anchor gdoc-page__anchor--right clip" aria-label="Anchor What is KivyMD" href="#what-is-kivymd">
 &lt;svg class="icon gdoc_link">&lt;use xlink:href="#gdoc_link">&lt;/use>&lt;/svg>
 &lt;/a>
 &lt;/h2>
&lt;/div>&lt;p>&lt;figure>&lt;img src="https://tmcdigitech.github.io/dit11/appdev/kivymd/previous.png">
&lt;/figure>

Is a collection of Material Design compliant widgets for use with, Kivy cross-platform graphical framework a framework for cross-platform, touch-enabled graphical applications. The project’s goal is to approximate Google’s Material Design spec as close as possible without sacrificing ease of use or application performance.&lt;/p>
&lt;p>&lt;a class="gdoc-markdown__link" href="https://kivymd.readthedocs.io/en/latest/#">https://kivymd.readthedocs.io/en/latest/#&lt;/a>&lt;/p>
&lt;ol>
&lt;li>After setting up your environment as explained in Hello World install KivyMD in a Terminal window as follows:&lt;/li>
&lt;/ol>
&lt;pre tabindex="0">&lt;code class="language-terminal" data-lang="terminal">pip3 install --trusted-host pypi.org --trusted-host files.pythonhosted.org kivymd&lt;/code>&lt;/pre>
&lt;p>Go to the KivyMD documentation to get started.
&lt;a class="gdoc-markdown__link" href="https://kivymd.readthedocs.io/en/latest/getting-started/">https://kivymd.readthedocs.io/en/latest/getting-started/&lt;/a>&lt;/p></description></item><item><title>More Widgets</title><link>https://tmcdigitech.github.io/dit11/appdev/basics/widgets/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://tmcdigitech.github.io/dit11/appdev/basics/widgets/</guid><description>&lt;p>&lt;em>Taken from &lt;a class="gdoc-markdown__link" href="https://prosperocoder.com/posts/kivy/kivy-part-7-even-more-widgets/">prosperocoder.com&lt;/a>&lt;/em>&lt;/p>
&lt;div class="gdoc-page__anchorwrap">
 &lt;h2 id="the-check-box-kivy-widget">
 The Check Box Kivy Widget
 &lt;a data-clipboard-text="https://tmcdigitech.github.io/dit11/appdev/basics/widgets/#the-check-box-kivy-widget" class="gdoc-page__anchor gdoc-page__anchor--right clip" aria-label="Anchor The Check Box Kivy Widget" href="#the-check-box-kivy-widget">
 &lt;svg class="icon gdoc_link">&lt;use xlink:href="#gdoc_link">&lt;/use>&lt;/svg>
 &lt;/a>
 &lt;/h2>
&lt;/div>&lt;p>Let’s start with the check box Kivy widget. The check box is a two-state button that can be either checked or unchecked. Later we’ll see that it can be used as a radio button as well, if it’s in a group, but for now let’s just have a look at a single check box.&lt;/p></description></item><item><title>Flowcharts</title><link>https://tmcdigitech.github.io/dit11/appdev/gettingStarted/flowcharts/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://tmcdigitech.github.io/dit11/appdev/gettingStarted/flowcharts/</guid><description>&lt;p>Flowcharts are a visual representation of program flow. A flowchart normally uses
a combination of blocks and arrows to represent actions and sequence. Blocks typically
represent actions. The order in which actions occur is shown using arrows that point from
statement to statement. Sometimes a block will have multiple arrows coming out of it,
representing a step where a decision must be made about which path to follow.&lt;/p>
&lt;div class="gdoc-columns flex flex-wrap">
 
 &lt;div class="gdoc-columns__content gdoc-markdown--nested flex-even">
 &lt;img src="flowchart_symbols.png" alt="Flowchart Symbols" />
 &lt;/div>
 
 &lt;div class="gdoc-columns__content gdoc-markdown--nested flex-even">
 &lt;p>&lt;strong>Start&lt;/strong> and &lt;strong>End&lt;/strong> symbols are represented as rounded rectangles,
usually containing the word &amp;ldquo;Star&amp;rdquo; or &amp;ldquo;End&amp;rdquo;, but can be more
specific such as &amp;ldquo;Power Robot Off&amp;rdquo; or &amp;ldquo;Stop All Motors&amp;rdquo;.&lt;/p></description></item><item><title>Programming Constructs</title><link>https://tmcdigitech.github.io/dit11/appdev/gettingStarted/constructs/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://tmcdigitech.github.io/dit11/appdev/gettingStarted/constructs/</guid><description>&lt;p>Programs are designed using common building blocks. These building blocks, known as programming constructs (or programming concepts), form the basis for all programs.&lt;/p>
&lt;p>There are three basic building blocks to consider:&lt;/p>
&lt;ul>
&lt;li>&lt;strong>sequence&lt;/strong> is the order in which instructions occur and are processed&lt;/li>
&lt;li>&lt;strong>selection&lt;/strong> determines which path a program takes when it is running&lt;/li>
&lt;li>&lt;strong>iteration&lt;/strong> is the repeated execution of a section of code when a program is running&lt;/li>
&lt;/ul>
&lt;div style="position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden;">
 &lt;iframe allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" allowfullscreen="allowfullscreen" loading="eager" referrerpolicy="strict-origin-when-cross-origin" src="https://www.youtube.com/embed/eSYeHlwDCNA?autoplay=0&amp;amp;controls=1&amp;amp;end=0&amp;amp;loop=0&amp;amp;mute=0&amp;amp;start=0" style="position: absolute; top: 0; left: 0; width: 100%; height: 100%; border:0;" title="YouTube video">&lt;/iframe>
 &lt;/div>

&lt;div class="gdoc-page__anchorwrap">
 &lt;h2 id="sequence">
 Sequence
 &lt;a data-clipboard-text="https://tmcdigitech.github.io/dit11/appdev/gettingStarted/constructs/#sequence" class="gdoc-page__anchor gdoc-page__anchor--right clip" aria-label="Anchor Sequence" href="#sequence">
 &lt;svg class="icon gdoc_link">&lt;use xlink:href="#gdoc_link">&lt;/use>&lt;/svg>
 &lt;/a>
 &lt;/h2>
&lt;/div>&lt;p>Sequence is the order in which programming statements are executed. Programming statements usually run one after another in order, unless one of the other programming constructs is used. The sequence of a program is extremely important as once these are translated, carrying out instructions in the wrong order leads to a program performing incorrectly.&lt;/p></description></item><item><title>argument</title><link>https://tmcdigitech.github.io/dit11/glossary/argument/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://tmcdigitech.github.io/dit11/glossary/argument/</guid><description>&lt;p>When &lt;em>calling&lt;/em> a function, the values given to it are called &lt;em>arguments&lt;/em>. For example, in this case:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="line">&lt;span class="cl">&lt;span class="n">total&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">add&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">3&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">4&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;code>3&lt;/code> and &lt;code>4&lt;/code> are arguments to the function &lt;code>add()&lt;/code>.&lt;/p>
&lt;p>When &lt;em>defining&lt;/em> a function, the pieces of information that the function takes to do its job are called &lt;a class="gdoc-markdown__link" href="https://tmcdigitech.github.io/dit11/glossary/parameter/">parameters&lt;/a>.&lt;/p></description></item><item><title>co-ordinate system</title><link>https://tmcdigitech.github.io/dit11/glossary/coordinate/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://tmcdigitech.github.io/dit11/glossary/coordinate/</guid><description>&lt;p>In most programming environments (such as Pygame Zero), the screen co-ordinate system uses &lt;code>(x, y)&lt;/code> co-ordinates, with the origin &lt;code>(0, 0)&lt;/code> in the top left corner of the screen, with &lt;code>x&lt;/code> to the right, and &lt;code>y&lt;/code> going down.&lt;/p>
&lt;p>&lt;img src="https://cdn-learn.adafruit.com/assets/assets/000/001/264/medium640/lcds___displays_coordsys.png?1396770439" alt="Some co-ordinates in screen-space" />&lt;/p>
&lt;p>Everything to be displayed on the screen must be &lt;em>rastered&lt;/em>, which means rendered into a grid of colored pixels.&lt;/p>
&lt;p>&lt;img src="https://cdn-learn.adafruit.com/guides/cropped_images/000/000/071/medium640/char.png?1534965453" alt="Capital letter A made using a 7x5 grid of pixels" />&lt;/p></description></item><item><title>color/colour</title><link>https://tmcdigitech.github.io/dit11/glossary/color/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://tmcdigitech.github.io/dit11/glossary/color/</guid><description>&lt;p>In almost all programming, American spellings are used. So as programmers we use &lt;strong>colors&lt;/strong>, even though we would normally spell the word &lt;strong>colours&lt;/strong>.&lt;/p>
&lt;p>For most programming, colors are described by the amount of red, green, and blue light to emit. These numbers are normally in the range 0-255. In Pygame Zero, we list these as a tuple &lt;code>(red, green, blue)&lt;/code>, such as:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="line">&lt;span class="cl">&lt;span class="p">(&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">150&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">255&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>You can use the &lt;a class="gdoc-markdown__link" href="https://www.google.com/search?q=color&amp;#43;picker">Google Color Picker&lt;/a> to find different colors, and then copy the RGB value listed.&lt;/p></description></item><item><title>parameter</title><link>https://tmcdigitech.github.io/dit11/glossary/parameter/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://tmcdigitech.github.io/dit11/glossary/parameter/</guid><description>&lt;p>When &lt;em>defining&lt;/em> a function, the pieces of information that the function takes to do its job are called &lt;em>parameters&lt;/em>. For example, here:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="line">&lt;span class="cl">&lt;span class="k">def&lt;/span> &lt;span class="nf">add&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">first&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">second&lt;/span>&lt;span class="p">):&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="n">first&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="n">second&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;code>first&lt;/code> and &lt;code>second&lt;/code> are the parameters of the function &lt;code>add()&lt;/code>.&lt;/p>
&lt;p>When &lt;em>calling&lt;/em> a function, the values given to it are called &lt;a class="gdoc-markdown__link" href="https://tmcdigitech.github.io/dit11/glossary/argument/">arguments&lt;/a>.&lt;/p></description></item><item><title>Site URL 🡄🡆</title><link>https://tmcdigitech.github.io/dit11/teaching/siteUrl/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://tmcdigitech.github.io/dit11/teaching/siteUrl/</guid><description>&lt;p>Learn about Pygame Zero here:&lt;/p>
&lt;p>&lt;span style="font-size: 130%; color: #ffc000;">&lt;code>https://tmcdigitech.github.io/dit8/&lt;/code>&lt;/span>&lt;/p></description></item><item><title>tuple</title><link>https://tmcdigitech.github.io/dit11/glossary/tuple/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://tmcdigitech.github.io/dit11/glossary/tuple/</guid><description>&lt;p>A tuple is a single unit of data made up of multiple values. In Python they are defined using round brackets, with commas separating the values. Tuples can contain all sorts of data as values, but in Pygame Zero we use them most often for &lt;a class="gdoc-markdown__link" href="https://tmcdigitech.github.io/dit11/glossary/color/">colors&lt;/a> &lt;code>(red, green, blue)&lt;/code> and &lt;a class="gdoc-markdown__link" href="https://tmcdigitech.github.io/dit11/glossary/coordinate/">co-ordinates&lt;/a> &lt;code>(x, y)&lt;/code>.&lt;/p></description></item><item><title>Why won't my program work?</title><link>https://tmcdigitech.github.io/dit11/troubleshooting/01whybroken/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://tmcdigitech.github.io/dit11/troubleshooting/01whybroken/</guid><description>&lt;p>Here is a checklist of things to look for if something is wrong&amp;hellip;&lt;/p>
&lt;div class="gdoc-page__anchorwrap">
 &lt;h2 id="spelling-and-capitalisation">
 Spelling and Capitalisation
 &lt;a data-clipboard-text="https://tmcdigitech.github.io/dit11/troubleshooting/01whybroken/#spelling-and-capitalisation" class="gdoc-page__anchor gdoc-page__anchor--right clip" aria-label="Anchor Spelling and Capitalisation" href="#spelling-and-capitalisation">
 &lt;svg class="icon gdoc_link">&lt;use xlink:href="#gdoc_link">&lt;/use>&lt;/svg>
 &lt;/a>
 &lt;/h2>
&lt;/div>&lt;p>&lt;strong>Remember that the computer is really, really, really, really &lt;em>stupid&lt;/em>&lt;/strong>. It will recognise only words it has been taught; it is not clever enough to handle spelling mistakes - these will confuse it. It is also not clever enough to know that most of the time we use &lt;code>A&lt;/code> and &lt;code>a&lt;/code> interchangeably, so you have to make sure that if the computer is expecting a capital letter, you give it one, and vice versa.&lt;/p></description></item></channel></rss>