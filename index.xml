<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>11 DigiTech on TMC - 11 Digital Tech</title><link>https://tmcdigitech.github.io/dit11/</link><description>Recent content in 11 DigiTech on TMC - 11 Digital Tech</description><generator>Hugo -- gohugo.io</generator><language>en-au</language><atom:link href="https://tmcdigitech.github.io/dit11/index.xml" rel="self" type="application/rss+xml"/><item><title>Buttons and Labels</title><link>https://tmcdigitech.github.io/dit11/appdev/basics/events/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://tmcdigitech.github.io/dit11/appdev/basics/events/</guid><description>Creating a .kv File Separated our logic from our styling and elements There are a few conventions we need to follow when creating a .kv file.
Naming: The name of your .kv file must follow the rules below in order for python/kivy to be able to see and load the file.
It must be all lowercase It must match with the name of your main class.</description></item><item><title>Classes and Methods</title><link>https://tmcdigitech.github.io/dit11/appdev/basics/classesandmethods/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://tmcdigitech.github.io/dit11/appdev/basics/classesandmethods/</guid><description>Object Oriented Programming (OOP) OOP has self-contained objects containing both the programming routine/procedures and the data being processed. These objects interact by sending data to one another.
In OOP, you write classes that represent real world things and create objects based on these classes. Classes attributes as well as procedures (often known as methods).
Class The class is the blueprint, or template, that defines what an object is.</description></item><item><title>Float Layout</title><link>https://tmcdigitech.github.io/dit11/appdev/layouts/floatlayout/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://tmcdigitech.github.io/dit11/appdev/layouts/floatlayout/</guid><description>A FloatLayout with a Button What we are going to do now is write code that uses a FloatLayout with a text input and a custom button in it. To demonstrate how the properties used for sizing and positioning work, though, let’s use just the button first.
The size_hint and pos_hint Properties This time we’re going to use the size_hint property instead of size to set the widget size.</description></item><item><title>Gem Catcher</title><link>https://tmcdigitech.github.io/dit11/gameDesign/03walkthroughs/gemCatcher/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://tmcdigitech.github.io/dit11/gameDesign/03walkthroughs/gemCatcher/</guid><description> First program update() Adding a gem Collision and Random Keeping Score Mouse and Events Game Over Challenges</description></item><item><title>Python</title><link>https://tmcdigitech.github.io/dit11/appdev/basics/python/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://tmcdigitech.github.io/dit11/appdev/basics/python/</guid><description>If you are new to Python, here is an good interactive guide you can get started with:
Aposteriori: Introduction to Python</description></item><item><title>Python</title><link>https://tmcdigitech.github.io/dit11/gameDesign/02basics/python/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://tmcdigitech.github.io/dit11/gameDesign/02basics/python/</guid><description>If you are new to Python, here is an good interactive guide you can get started with:
Aposteriori: Introduction to Python</description></item><item><title>Software</title><link>https://tmcdigitech.github.io/dit11/appdev/gettingStarted/software/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://tmcdigitech.github.io/dit11/appdev/gettingStarted/software/</guid><description>To start using Kivy to develop apps, you will need to:
Open the Company Portal: Find and install Visual Studio Code (NOT Visual Studio Community): Find and install Python (3.9):
Open Visual Studio Code and install the Python Extension</description></item><item><title>1. Hello World</title><link>https://tmcdigitech.github.io/dit11/appdev/gettingStarted/helloworld/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://tmcdigitech.github.io/dit11/appdev/gettingStarted/helloworld/</guid><description>Taken from prosperocoder.com
Hello World – A Basic Kivy App Well, we’re going to write a basic Kivy app that will display the Hello World text. In Kivy, like in many other GUI libraries and frameworks, static text is usually displayed in a label. In Kivy we call simple GUI elements like labels, buttons, sliders, check boxes, etc. widgets, although widgets don’t have to be simple at all and you can create your own widgets, which we are going to do later.</description></item><item><title>2. Kv Files</title><link>https://tmcdigitech.github.io/dit11/appdev/gettingStarted/kvfiles/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://tmcdigitech.github.io/dit11/appdev/gettingStarted/kvfiles/</guid><description>Taken from prosperocoder.com
Our program contains just one widget, the label. This is all as far as presentation is concerned. We’ll move that part to a new file and leave the rest in the main.py file. So, after we remove the presentation part from the main.py, as well as the comments to make the file clear and transparent, this is what we’ll have:
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 # We&amp;#39;re using Kivy, so we&amp;#39;ll need the kivy module import kivy # We need the App class.</description></item><item><title>3. Label Properties</title><link>https://tmcdigitech.github.io/dit11/appdev/gettingStarted/labels/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://tmcdigitech.github.io/dit11/appdev/gettingStarted/labels/</guid><description>Taken from prosperocoder.com
Here’s the code again.
The Python file:
1 2 3 4 5 6 7 8 9 10 11 12 File name: main.py import kivy from kivy.app import App from kivy.uix.button import Label class HelloWorldApp(App): def build(self): return Label() if __name__ == &amp;#39;__main__&amp;#39;: HelloWorldApp().run() and the kv file: 1 2 3 4 # File name: helloworld.kv &amp;lt;Label&amp;gt;: text: &amp;#39;Hello World!&amp;#39;
This program displays a label.</description></item><item><title>4. Buttons</title><link>https://tmcdigitech.github.io/dit11/appdev/gettingStarted/buttons/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://tmcdigitech.github.io/dit11/appdev/gettingStarted/buttons/</guid><description>Taken from prosperocoder.com
A Button Widget is Basically a Label… In Kivy the Button class inherits from Label, so they have the same properties in common, plus the button has some extra functionality. In particular they share the text property. Let’s modify our main.py and helloworld.kv files so that our program displays a button widget instead of a label. First, let the changes be as few as possible.</description></item><item><title>Ninja Runner</title><link>https://tmcdigitech.github.io/dit11/gameDesign/03walkthroughs/ninjaRunner/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://tmcdigitech.github.io/dit11/gameDesign/03walkthroughs/ninjaRunner/</guid><description> Infinite Runner Background Ninja Jumping Obstacles Keeping Score Game Over Challenges and Bugs</description></item><item><title>Page Layouts</title><link>https://tmcdigitech.github.io/dit11/appdev/layouts/pagelayouts/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://tmcdigitech.github.io/dit11/appdev/layouts/pagelayouts/</guid><description>The PageLayout works in a different manner from other layouts. It is a dynamic layout, in the sense that it allows flipping through pages using its borders. The idea is that its components are stacked in front of each other, and we can just see the one that is on top. PageLayout is similar to pages of a copy like that we can move/change the pages right or left.
The PageLayout class is used to create a simple multi-page layout, in a way that allows easy flipping from one page to another using border.</description></item><item><title>Pygame Zero</title><link>https://tmcdigitech.github.io/dit11/gameDesign/02basics/pygameZero/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://tmcdigitech.github.io/dit11/gameDesign/02basics/pygameZero/</guid><description>Let&amp;rsquo;s get a simple game happening, a bit at a time, so you can see how you might go about it yourself.
All of these examples are complete programs, so make sure you copy them into Mu (or whatever editor you&amp;rsquo;re using) and run them as you go through this page.
Screen size Let&amp;rsquo;s start by setting the size of the screen.
1 2 3 4 5 6 import pgzrun WIDTH = 800 HEIGHT = 600 pgzrun.</description></item><item><title>More Layouts</title><link>https://tmcdigitech.github.io/dit11/appdev/layouts/morelayouts/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://tmcdigitech.github.io/dit11/appdev/layouts/morelayouts/</guid><description>Relative Layout RelativeLayout works pretty much like FloatLayout and the difference will be clear only later when we embed it in another layout. Here’s a simple example with a RelativeLayout and just one button in it. The button should be positioned at the fixed coordinates 0, 0 and occupy about a third of the available space in both horizontal and vertical direction.
Here’s the Python code: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 import kivy from kivy.</description></item><item><title>Tanks</title><link>https://tmcdigitech.github.io/dit11/gameDesign/03walkthroughs/tankGame/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://tmcdigitech.github.io/dit11/gameDesign/03walkthroughs/tankGame/</guid><description> Battle City 1985 Tank Moving the tank Background and Walls Randomizing the Walls Blocking Movements Tank Cannon Destroying Walls One Enemy Enemy Bullets Many Enemies Winning and Losing</description></item><item><title>Activity 1</title><link>https://tmcdigitech.github.io/dit11/appdev/basics/activity1/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://tmcdigitech.github.io/dit11/appdev/basics/activity1/</guid><description>Setting up The Python Script 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 import kivy from kivy.app import App from kivy.uix.label import Label from kivy.uix.gridlayout import GridLayout from kivy.uix.textinput import TextInput from kivy.uix.button import Button from kivy.uix.widget import Widget from kivy.properties import ObjectProperty class MyGrid(Widget): pass class MyApp(App): def build(self): return MyGrid() if __name__ == &amp;#34;__main__&amp;#34;: MyApp().</description></item><item><title>Chase game</title><link>https://tmcdigitech.github.io/dit11/gameDesign/03walkthroughs/chaseGame/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://tmcdigitech.github.io/dit11/gameDesign/03walkthroughs/chaseGame/</guid><description>Chase game</description></item><item><title>Embedding Layouts</title><link>https://tmcdigitech.github.io/dit11/appdev/layouts/embedlayouts/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://tmcdigitech.github.io/dit11/appdev/layouts/embedlayouts/</guid><description>FloatLayouts and RelativeLayouts inside GridLayout As mentioned in the previous part, the FloatLayout and the RelativeLayout are pretty similar. The difference is that with the FloatLayout the coordinates are not relative to the position of the layout, whereas with RelativeLayout they are. Here’s a simple demonstration. We’ll use a GridLayout and embed four other layouts in it, two FloatLayouts and two RelativeLayouts. Here’s the Python code:
1 2 3 4 5 6 7 8 9 10 11 12 import kivy from kivy.</description></item><item><title>Maze game</title><link>https://tmcdigitech.github.io/dit11/gameDesign/03walkthroughs/mazeGame/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://tmcdigitech.github.io/dit11/gameDesign/03walkthroughs/mazeGame/</guid><description>Maze game
Introduces tile maps</description></item><item><title>Shooting game</title><link>https://tmcdigitech.github.io/dit11/gameDesign/03walkthroughs/shootingGame/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://tmcdigitech.github.io/dit11/gameDesign/03walkthroughs/shootingGame/</guid><description>Shooting game</description></item><item><title>Racing game</title><link>https://tmcdigitech.github.io/dit11/gameDesign/03walkthroughs/racingGame/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://tmcdigitech.github.io/dit11/gameDesign/03walkthroughs/racingGame/</guid><description>Racing game</description></item><item><title>Flowcharts</title><link>https://tmcdigitech.github.io/dit11/appdev/gettingStarted/flowcharts/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://tmcdigitech.github.io/dit11/appdev/gettingStarted/flowcharts/</guid><description>Flowcharts are a visual representation of program flow. A flowchart normally uses a combination of blocks and arrows to represent actions and sequence. Blocks typically represent actions. The order in which actions occur is shown using arrows that point from statement to statement. Sometimes a block will have multiple arrows coming out of it, representing a step where a decision must be made about which path to follow.
Start and End symbols are represented as rounded rectangles, usually containing the word &amp;ldquo;Star&amp;rdquo; or &amp;ldquo;End&amp;rdquo;, but can be more specific such as &amp;ldquo;Power Robot Off&amp;rdquo; or &amp;ldquo;Stop All Motors&amp;rdquo;.</description></item><item><title>Programming Constructs</title><link>https://tmcdigitech.github.io/dit11/appdev/gettingStarted/constructs/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://tmcdigitech.github.io/dit11/appdev/gettingStarted/constructs/</guid><description>Programs are designed using common building blocks. These building blocks, known as programming constructs (or programming concepts), form the basis for all programs.
There are three basic building blocks to consider:
sequence is the order in which instructions occur and are processed selection determines which path a program takes when it is running iteration is the repeated execution of a section of code when a program is running Sequence Sequence is the order in which programming statements are executed.</description></item><item><title>Vertical shooter</title><link>https://tmcdigitech.github.io/dit11/gameDesign/03walkthroughs/verticalShooter/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://tmcdigitech.github.io/dit11/gameDesign/03walkthroughs/verticalShooter/</guid><description> Twin Bee</description></item><item><title>More walk-throughs</title><link>https://tmcdigitech.github.io/dit11/gameDesign/03walkthroughs/moreTutorials/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://tmcdigitech.github.io/dit11/gameDesign/03walkthroughs/moreTutorials/</guid><description>Simple Game Tutorials for Python and Pygame Zero 1.2</description></item><item><title>argument</title><link>https://tmcdigitech.github.io/dit11/glossary/argument/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://tmcdigitech.github.io/dit11/glossary/argument/</guid><description>When calling a function, the values given to it are called arguments. For example, in this case:
total = add(3, 4) 3 and 4 are arguments to the function add().
When defining a function, the pieces of information that the function takes to do its job are called parameters.</description></item><item><title>co-ordinate system</title><link>https://tmcdigitech.github.io/dit11/glossary/coordinate/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://tmcdigitech.github.io/dit11/glossary/coordinate/</guid><description>In most programming environments (such as Pygame Zero), the screen co-ordinate system uses (x, y) co-ordinates, with the origin (0, 0) in the top left corner of the screen, with x to the right, and y going down.
Everything to be displayed on the screen must be rastered, which means rendered into a grid of colored pixels.</description></item><item><title>color/colour</title><link>https://tmcdigitech.github.io/dit11/glossary/color/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://tmcdigitech.github.io/dit11/glossary/color/</guid><description>In almost all programming, American spellings are used. So as programmers we use colors, even though we would normally spell the word colours.
For most programming, colors are described by the amount of red, green, and blue light to emit. These numbers are normally in the range 0-255. In Pygame Zero, we list these as a tuple (red, green, blue), such as:
(0, 150, 255) You can use the Google Color Picker to find different colors, and then copy the RGB value listed.</description></item><item><title>Enchanted Scepters</title><link>https://tmcdigitech.github.io/dit11/gameDesign/inspiration/EnchantedScepters/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://tmcdigitech.github.io/dit11/gameDesign/inspiration/EnchantedScepters/</guid><description>by Silicon Beach Software (1984)
In this part-illustrated, part-text adventure, you are tasked with recovering four magical sceptres (earth, fire, wind and water, of course) to save your kingdom from invasion.</description></item><item><title>Iago</title><link>https://tmcdigitech.github.io/dit11/gameDesign/inspiration/Iago/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://tmcdigitech.github.io/dit11/gameDesign/inspiration/Iago/</guid><description>by David Reed (1984)
Iago was a very early Othello/Reversi game, which offered excellent gameplay. You could play against a friend or a computer with three levels of difficulty, on three different sizes of board.
It even has a special feature to hide the game if you are playing it at work and your boss is coming&amp;hellip;</description></item><item><title>parameter</title><link>https://tmcdigitech.github.io/dit11/glossary/parameter/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://tmcdigitech.github.io/dit11/glossary/parameter/</guid><description>When defining a function, the pieces of information that the function takes to do its job are called parameters. For example, here:
def add(first, second): return first + second first and second are the parameters of the function add().
When calling a function, the values given to it are called arguments.</description></item><item><title>Phrase Craze</title><link>https://tmcdigitech.github.io/dit11/gameDesign/inspiration/PhraseCraze/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://tmcdigitech.github.io/dit11/gameDesign/inspiration/PhraseCraze/</guid><description>by Brad Pettit (1986)
Borrowing heavily from the TV game show Wheel of Fortune, Phrase Craze offers up to four players the chance to relive the thrill of being on the set, complete with game board, wheel, and charming host. You could also modify the PhraseFile to create your own puzzles.</description></item><item><title>Site URL 🡄🡆</title><link>https://tmcdigitech.github.io/dit11/teaching/siteUrl/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://tmcdigitech.github.io/dit11/teaching/siteUrl/</guid><description>Learn about Pygame Zero here:
https://tmcdigitech.github.io/dit8/</description></item><item><title>Software</title><link>https://tmcdigitech.github.io/dit11/gameDesign/01gettingStarted/software/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://tmcdigitech.github.io/dit11/gameDesign/01gettingStarted/software/</guid><description>To develop games using Pygame Zero, you have two main options:
use Mu use another editor Mu is set up to be very helpful for beginners. It has some keyboard shortcuts, good help text, nice shortcut buttons, and is generaly very friendly to use and has a lot of features to help beginners get started.
After you have been writing code for a while, you may find that a standard Python environment and a &amp;ldquo;full&amp;rdquo; text editor like Visual Studio Code allows you a lot more power and flexibility, at the cost of doing some more basic things yourself.</description></item><item><title>Structuring your files</title><link>https://tmcdigitech.github.io/dit11/gameDesign/01gettingStarted/fileStructure/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://tmcdigitech.github.io/dit11/gameDesign/01gettingStarted/fileStructure/</guid><description>Each of your projects should live in its own folder somewhere sensible (like in a Digital Tech folder in your OneDrive!).
project/ ├── game.py │ ├── images/ │ ├── someImage.jpg │ ├── anotherImage.jpg │ └── ... # sprites, tiles and other image files │ ├── fonts/ │ └── ... # any font files │ ├── sounds/ │ └── ... # any sound files │ └── music/ └── ... # any music files You don&amp;rsquo;t need to have those folders unless you have something to put in them.</description></item><item><title>StuntCopter</title><link>https://tmcdigitech.github.io/dit11/gameDesign/inspiration/StuntCopter/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://tmcdigitech.github.io/dit11/gameDesign/inspiration/StuntCopter/</guid><description>by Duane Blehm (1986)
Part of the genius of this game is how simple it is. Your aim is to drop people out of a helicopter onto the cart, carefully avoiding the rider and the horse. The further up you drop from, the more points you get. See what happens when you drop someone through the clouds&amp;hellip;
If you go to Options &amp;gt; OffScreen in the menu, you can also see the complete sprite sheet for the game; a nice touch.</description></item><item><title>tuple</title><link>https://tmcdigitech.github.io/dit11/glossary/tuple/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://tmcdigitech.github.io/dit11/glossary/tuple/</guid><description>A tuple is a single unit of data made up of multiple values. In Python they are defined using round brackets, with commas separating the values. Tuples can contain all sorts of data as values, but in Pygame Zero we use them most often for colors (red, green, blue) and co-ordinates (x, y).</description></item><item><title>Why won't my program work?</title><link>https://tmcdigitech.github.io/dit11/troubleshooting/01whybroken/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://tmcdigitech.github.io/dit11/troubleshooting/01whybroken/</guid><description>Here is a checklist of things to look for if something is wrong&amp;hellip;
Spelling and Capitalisation Remember that the computer is really, really, really, really stupid. It will recognise only words it has been taught; it is not clever enough to handle spelling mistakes - these will confuse it. It is also not clever enough to know that most of the time we use A and a interchangeably, so you have to make sure that if the computer is expecting a capital letter, you give it one, and vice versa.</description></item></channel></rss>